name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install frontend dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

      - name: Check Prettier formatting
        run: pnpm format:check

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust formatting
        run: cd src-tauri && cargo fmt --check

      - name: Run Clippy
        run: cd src-tauri && cargo clippy -- -D warnings

  build:
    name: Build Application
    needs: lint-and-format
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Build Tauri app (macOS Universal)
        run: pnpm tauri build --target universal-apple-darwin

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
          if-no-files-found: error
